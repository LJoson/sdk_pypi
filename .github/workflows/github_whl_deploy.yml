name: Build and upload wheel to PyPI

on:
  schedule:
    #        ┌───────────── minute (0 - 59)
    #        │  ┌───────────── hour (0 - 23)
    #        │  │ ┌───────────── day of the month (1 - 31)
    #        │  │ │ ┌───────────── month (1 - 12 or JAN-DEC)
    #        │  │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
    #        │  │ │ │ │
    - cron: "42 2 * * SUN,WED"
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
  release:
    types:
      - published

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install deps
      run: python -m pip install twine build

    - name: Build SDist
      run: python -m build -s

    - name: Check metadata
      run: twine check dist/*

    - uses: actions/upload-artifact@v3
      with:
        path: dist/*.tar.gz
  build_wheels:
    name: ${{ matrix.arch }} ${{ matrix.build }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-20.04, arch: x86_64,     build: 'cp*-manylinux*' }
          - { os: ubuntu-20.04, arch: x86_64,     build: 'cp*-musllinux*' }
          - { os: ubuntu-20.04, arch: x86_64,     build: 'pp*'            }
          - { os: ubuntu-20.04, arch: i686,       build: 'cp*-manylinux*' }
          - { os: ubuntu-20.04, arch: i686,       build: 'cp*-musllinux*' }
          - { os: ubuntu-20.04, arch: i686,       build: 'pp*'            }
          - { os: ubuntu-20.04, arch: aarch64,       build: 'cp*-manylinux*' }
          - { os: ubuntu-20.04, arch: aarch64,       build: 'cp*-musllinux*' }
          - { os: ubuntu-20.04, arch: aarch64,       build: 'pp*'            }
          - { os: ubuntu-18.04, arch: x86_64,     build: 'cp*-manylinux*' }
          - { os: ubuntu-18.04, arch: x86_64,     build: 'cp*-musllinux*' }
          - { os: ubuntu-18.04, arch: x86_64,     build: 'pp*'            }
          - { os: ubuntu-18.04, arch: i686,       build: 'cp*-manylinux*' }
          - { os: ubuntu-18.04, arch: i686,       build: 'cp*-musllinux*' }
          - { os: ubuntu-18.04, arch: i686,       build: 'pp*'            }
          - { os: ubuntu-18.04, arch: aarch64,       build: 'cp*-manylinux*' }
          - { os: ubuntu-18.04, arch: aarch64,       build: 'cp*-musllinux*' }
          - { os: ubuntu-18.04, arch: aarch64,       build: 'pp*'            }
          - { os: ubuntu-22.04, arch: x86_64,     build: 'cp*-manylinux*' }
          - { os: ubuntu-22.04, arch: x86_64,     build: 'cp*-musllinux*' }
          - { os: ubuntu-22.04, arch: x86_64,     build: 'pp*'            }
          - { os: ubuntu-22.04, arch: i686,       build: 'cp*-manylinux*' }
          - { os: ubuntu-22.04, arch: i686,       build: 'cp*-musllinux*' }
          - { os: ubuntu-22.04, arch: i686,       build: 'pp*'            }
          - { os: ubuntu-22.04, arch: aarch64,       build: 'cp*-manylinux*' }
          - { os: ubuntu-22.04, arch: aarch64,       build: 'cp*-musllinux*' }
          - { os: ubuntu-22.04, arch: aarch64,       build: 'pp*'            }

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.15.0
      env:
        CIBW_ARCHS_MACOS: ${{ matrix.arch }}
        CIBW_ARCHS_LINUX: ${{ matrix.arch }}
        CIBW_ARCHS_WINDOWS: ${{ matrix.arch }}
        CIBW_BUILD: ${{ matrix.build }}
        CIBW_BUILD_VERBOSITY: 1
        CIBW_ENVIRONMENT: CMAKE_BUILD_PARALLEL_LEVEL=2

    - name: Show files
      run: ls -lh wheelhouse
      shell: bash

    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        path: wheelhouse/*.whl

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # To test: repository_url: https://test.pypi.org/legacy/


